;;
;; this script generates a static blog site
;;
;; TODO's
;;   [] rss/atom feed
;;   [] implement dullmark?

#lang racket
(require racket/cmdline)
(require commonmark)
(require toml)

(define post-mode (make-parameter #f))

(define rackle
  (command-line
   #:program "rackle"
   #:once-each
   [("-p" "--post") "Post to website via rsync, will generate new website before posting"
                    (post-mode #t)]
   #:args (file-path)
   file-path))

(define html-header "<!doctype html> \
<html lang=\"en\"> \
  <head> \
    <script type=\"text/javascript\"
 src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML\"></script> \
        <meta charset=\"utf-8\"> \
        <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"> \
        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \
        <title> Archives</title> \
        <link rel=\"stylesheet\" href=\"./css/default.css\" /> \
    </head> \
    <body> \
        <header> \
            <div class=\"logo\"> \
                <a href=\"./\">~dave's blog~</a> \
            </div> \
            <nav>  \
                <a href=\"./index.html\">home</a> \
                <a href=\"./about.html\">about</a> \
                <a href=\"./archive.html\">posts</a> \
            </nav> \
        </header>" )

(define html-post-header "<!doctype html> \
<html lang=\"en\"> \
  <head> \
    <script type=\"text/javascript\"
src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML\"></script> \
        <meta charset=\"utf-8\"> \
        <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"> \
        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \
        <title> Archives</title> \
        <link rel=\"stylesheet\" href=\"../css/default.css\" /> \
    </head> \
    <body> \
        <header> \
            <div class=\"logo\"> \
                <a href=\"../\">~dave's blog~</a> \
            </div> \
            <nav>  \
                <a href=\"../index.html\">home</a> \
                <a href=\"../about.html\">about</a> \
                <a href=\"../archive.html\">posts</a> \
            </nav> \
        </header>" )

(define html-footer "         <footer> \
            Site proudly generated by rackle \
        </footer> \
    </body> \
</html> \
")

(define (string-append-paths p s)
  (string-append (path->string p) s))

(define (find-char c li res)
  (if (eq? c (car li))
	  res
	  (find-char c (cdr li) (cons (car li) res))))

(define (zip l1 l2)
  (map (lambda (i j) (list i j)) l1 l2))

(define (to-html s)
  (string-append s ".html"))

(define (split-at a b)
  (let ((exploded (string->list b)))
	(find-char a exploded '())))

(define (get-post-name post)
  ;(print post)
  (let ((md-name (split-at #\/ (list->string (reverse (string->list post))))))
	(list->string (reverse (split-at #\. (list->string md-name))))))

(define (convert-posts-to-path dest-path post)
  (let ((out-file (open-output-file
                   (string-append dest-path "/"
                                  (to-html (get-post-name post))) #:exists 'replace #:mode'text))
		(doc (document->html (read-document (open-input-file post))))
		(doc2 (write-document-html (read-document (open-input-file post)))))
	(display (string-append html-post-header doc html-footer) out-file)
	;(write-document-html (read-document (open-input-file post)) out-file)
	(close-output-port out-file)))

(define (convert-about-to-path dest-path post)
  (let ((out-file (open-output-file
                   (string-append dest-path "/"
                                  (to-html (get-post-name post))) #:exists 'replace #:mode'text))
		(doc (document->html (read-document (open-input-file post))))
		(doc2 (write-document-html (read-document (open-input-file post)))))
	(display (string-append html-header doc html-footer) out-file)
	;(write-document-html (read-document (open-input-file post)) out-file)
	(close-output-port out-file)))

(define (to-link l)
  (let* ((link (car l))
		(name (car (cdr l))))
	(string-append "<a href=\"" link  "\">" name "</a>")))

(define (split-into-link l)
  (let* ((name (get-post-name l))
		 (link (string-append "./posts/" name ".html")))
	(list link name)))

(define (to-list-el i)
  (string-append "\n<li>\n" (to-link (split-into-link i)) "\n</li>\n"))

(define (to-html-list li)
  (string-append "\n<ul>\n" (string-append* (map to-list-el li)) "\n</ul>\n"))

(define (get-post-list in-path)
  (let* ((posts-path (string-append-paths in-path "/_site/posts"))
		 (dir-list (directory-list (string->path posts-path)))
		 (dir-path-list (map (curry string-append "/_site/posts/")
				     (map path->string dir-list))))
	(to-html-list dir-path-list)))

(define (create-posts in-path)
  (let* ((posts-path (string-append-paths in-path "/draft/posts"))
		 (dir-list (directory-list (string->path posts-path)))
		 (dir-path-list-temp (map path->string dir-list))
		 (dir-path-list (map (curry string-append posts-path "/") dir-path-list-temp))
		 (site-post-path (string-append-paths in-path "/_site/posts")))
	 (map (curry convert-posts-to-path site-post-path) dir-path-list)
   ))

(define (create-about in-path)
  (let* ((about-path (string-append-paths in-path "/draft/about.md"))
		 (dest-path (string-append-paths in-path "/_site/")))
	(convert-about-to-path dest-path about-path)))

(define (create-index in-path)
  (let* ((dest-path (string-append-paths in-path "/_site/"))
		(idx-file (open-output-file (string-append dest-path "index.html") #:exists 'replace))
		(posts (get-post-list in-path))
		(idx-string (string-append html-header posts html-footer)))
	(display idx-string idx-file)))

(define (create-archive in-path)
  (let* ((dest-path (string-append-paths in-path "/_site/"))
		(idx-file (open-output-file (string-append dest-path "archive.html") #:exists 'replace))
		(posts (get-post-list in-path))
		(idx-string (string-append html-header posts html-footer)))
	(display idx-string idx-file)))

(define (create-site in-path)
  (create-posts   (string->path in-path))
  (create-about   (string->path in-path))
  (create-index   (string->path in-path))
  (create-archive (string->path in-path)))

(define (run-post config-path in_path)
  (let* ((toml_data (parse-toml (file->string config-path)))
         (server (hash-ref toml_data 'server))
         (user (hash-ref toml_data 'user))
         (path (hash-ref toml_data 'path))
         (r-string (string-append "rsync -r " in_path "/_site/ " user "@" server ":" path)))
    (print r-string)
    (system r-string)))

(define run-rackle
  (let ((path rackle))
    (if (equal? (post-mode) #t)
	(run-post "config.toml" path)
        (create-site path))))

run-rackle
