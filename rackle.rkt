;;
;; this script generates a static blog site
;;
;; TODO's
;;   [] implement dullmark?
;;   [] more literate parsers
;;   [] copy over css
;;   [] dir path list function
;;   [x] add date parsing to titles
;;   [x] fix rss generation
;;   [] fix site cache functionality
;;   [] add date info to posts
;;   [] add tags
;    [] fix titles

#lang racket
(require racket/cmdline)
(require racket/date)
(require racket/serialize)
(require commonmark)
(require toml)
(require splitflap)
(require (only-in srfi/19 string->date))
(require "parsers/c-parser.rkt")

(define post-mode (make-parameter #f))

(define file-date-map (make-hash))

(define rackle
  (command-line
   #:program "rackle"
   #:once-each
   [("-p" "--post") "Post to website via rsync, will generate new website before posting"
                    (post-mode #t)]
   #:args (file-path)
   file-path))

(define html-header "<!doctype html> \
<html lang=\"en\"> \
  <head> \
    <script type=\"text/javascript\"
 src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML\"></script> \
        <meta charset=\"utf-8\"> \
        <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"> \
        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \
        <link rel=\"stylesheet\" href=\"./css/default.css\" /> \
    </head> \
    <body> \
        <header> \
            <div class=\"logo\"> \
                <a href=\"./\">~dave's blog~</a> \
            </div> \
            <nav>  \
                <a href=\"./index.html\">home</a> \
                <a href=\"./about.html\">about</a> \
                <a href=\"./archive.html\">posts</a> \
            </nav> \
        </header>" )

(define html-post-header "<!doctype html> \
<html lang=\"en\"> \
  <head> \
    <script type=\"text/javascript\"
src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML\"></script> \
<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\"> \
<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\

<script>hljs.highlightAll();</script> \


        <meta charset=\"utf-8\"> \
        <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"> \
        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \

        <link rel=\"stylesheet\" href=\"../css/default.css\" /> \
    </head> \
    <body> \
        <header> \
            <div class=\"logo\"> \
                <a href=\"../\">~dave's blog~</a> \
            </div> \
            <nav>  \
                <a href=\"../index.html\">home</a> \
                <a href=\"../about.html\">about</a> \
                <a href=\"../archive.html\">posts</a> \
            </nav> \
        </header>" )

(define html-footer "         <footer> \
            Site proudly generated by rackle . <a href=\"./feed.rss\">rss</a> \
        </footer> \
    </body> \
</html> \
")

(define html-post-footer "         <footer> \
            Site proudly generated by rackle . <a href=\"../feed.rss\">rss</a> \
        </footer> \
    </body> \
</html> \
")

(define (string-append-paths p s)
  (string-append (path->string p) s))

(define (find-char c li res)
  (if (eq? c (car li))
	  res
	  (find-char c (cdr li) (cons (car li) res))))

(define (zip l1 l2)
  (map (lambda (i j) (list i j)) l1 l2))

(define (to-html s)
  (string-append s ".html"))

(define (split-at a b)
  (let ((exploded (string->list b)))
	(find-char a exploded '())))

(define (get-extension p)
  (second (string-split p ".")))

(define (get-post-name post)
  (let ((md-name (split-at #\/ (list->string (reverse (string->list post))))))
	(first (string-split (list->string (reverse (split-at #\. (list->string md-name)))) "_"))))

(define (get-file-name post)
  (let ((name (split-at #\/ (list->string (reverse (string->list post))))))
	(list->string name)))

(define (convert-posts-to-path dest-path post)
  (let ((out-file (open-output-file
                   (string-append dest-path "/"
                                  (to-html (get-post-name post))) #:exists 'replace #:mode'text))

		(doc
         (match (get-extension post)
           ("md" (document->html (read-document (open-input-file post))))
           ("cpp" (c->html post))
           ("c" (c->html post))
           ("cc" (c->html post)))))
         ;(document->html (read-document (open-input-file post)))))
		;(doc2 (write-document-html (read-document (open-input-file post)))))
	(display (string-append html-post-header doc html-post-footer) out-file)
	(close-output-port out-file)))

(define (convert-about-to-path dest-path post)
  (let ((out-file (open-output-file
                   (string-append dest-path "/"
                                  (to-html (get-post-name post))) #:exists 'replace #:mode'text))
		(doc (document->html (read-document (open-input-file post)))))
		;(doc2 (write-document-html (read-document (open-input-file post)))))
	(display (string-append html-header doc html-footer) out-file)
	(close-output-port out-file)))

(define (to-link l)
  (let* ((link (car l))
		(name (car (cdr l))))
	(string-append "<a href=\"" link  "\">" (string-replace name "-" " ") "</a>")))

(define (split-into-link l)
  (let* ((name (get-post-name l))
		 (link (string-append "./posts/" name ".html")))
	(list link name)))

(define (to-list-el i)
  (string-append "\n<li>\n" (to-link (split-into-link i)) "\n</li>\n"))

(define (to-html-list li)
  (string-append "\n<ul>\n" (string-append* (map to-list-el li)) "\n</ul>\n"))

(define (get-title post)
  (let ((post-name (get-post-name post)))
    (string-titlecase (string-replace post-name "-" " "))))

(define (get-contents post)
  (file->string post))

(define (get-posts in-path)
   (let* ((posts-path (string-append-paths in-path "/_site/posts"))
		 (dir-list (directory-list (string->path posts-path)))
		 (dir-path-list (map (curry string-append (path->string in-path) "/_site/posts/")
				     (map path->string dir-list))))
     dir-path-list))

(define (date->number d)
  (string->number (string-append* (string-split d "-"))))

(define (get-file-time-pairs li res)
  (if (equal? #t (null? li))
      res
      (begin
        (let ((fname (first (string-split (get-file-name (car li)) "."))))
          (set! res (append res (list (cons (car li) (date->number (hash-ref file-date-map fname))))))
          (get-file-time-pairs (cdr li) res)))))

(define (get-cars li res)
  (if (equal? #t (null? li))
      res
      (begin
        (set! res (append res (list (car (car li)))))
        (get-cars (cdr li) res))))

(define (sort-file-list in-path dir-list)
  (let* ((dir-list-paths (map (curry string-append
                                     (path->string
                                      in-path)) dir-list))
         (file-times (get-file-time-pairs dir-list-paths '()))
         (sorted-list (sort file-times #:key cdr >)))
    ;(print file-times)
    ;(print dir-list-paths)
    (get-cars sorted-list '())))

(define (get-post-list in-path)
  (let* ((posts-path (string-append-paths in-path "/_site/posts"))
		 (dir-list (directory-list (string->path posts-path)))
		 (dir-path-list (map (curry string-append "/_site/posts/")
				     (map path->string dir-list))))
	(to-html-list (sort-file-list in-path dir-path-list))))

(define (create-posts in-path diff)
  (let* ((posts-path (string-append-paths in-path "/draft/posts"))
		 (dir-list (directory-list (string->path posts-path)))
		 (dir-path-list-temp (map path->string dir-list))
		 (dir-path-list (map (curry string-append posts-path "/") dir-path-list-temp))
		 (site-post-path (string-append-paths in-path "/_site/posts")))
	 (map (curry convert-posts-to-path site-post-path) dir-path-list)
  (map (curry convert-posts-to-path site-post-path) diff)))


(define (create-about in-path)
  (let* ((about-path (string-append-paths in-path "/draft/about.md"))
		 (dest-path (string-append-paths in-path "/_site/")))
	(convert-about-to-path dest-path about-path)))

(define (create-index in-path)
  (let* ((dest-path (string-append-paths in-path "/_site/"))
		(idx-file (open-output-file (string-append dest-path "index.html") #:exists 'replace))
		(posts (get-post-list in-path))
		(idx-string (string-append html-header posts html-footer)))
	(display idx-string idx-file)))

(define (create-archive in-path)
  (let* ((dest-path (string-append-paths in-path "/_site/"))
		(idx-file (open-output-file (string-append dest-path "archive.html") #:exists 'replace))
		(posts (get-post-list in-path))
		(idx-string (string-append html-header posts html-footer)))
	(display idx-string idx-file)))

(define (pad d)
  (if (< (string-length d) 2)
      (string-append "0" d)
      d))

(define (build-file-date-map posts)
  (for ([p posts])
    (let* ((fname (first (string-split (get-file-name p) ".")))
           (fdate (second (string-split fname "_"))))
      (hash-set! file-date-map (first (string-split fname "_")) fdate))))

;; returns modified date as "YYYY-MM-DD"
(define (get-file-date file-path)
  (let* ((fname (first (string-split (get-file-name file-path) "."))))
   ;      (fdate (second (string-split fname "_")))
   ;      (dt (seconds->date (file-or-directory-modify-seconds file-path)))
   ;      (year (number->string (date-year dt)))
   ;      (month (pad (number->string (date-month dt))))
   ;      (day   (pad (number->string (date-day   dt)))))
    (hash-ref file-date-map fname)))
    ;(string-append year "-" month "-" day)))
    ;(hash-set! file-date-map (first (string-split fname "_")) fdate)
;    fdate))

(define (build-item url author email id post)
  (list
   (feed-item
    (append-specific id (get-post-name post))
    (string-append url "/posts/" (to-html (get-post-name post)))
    (get-title post)
    (person author email)
    (infer-moment (get-file-date post))
    (infer-moment (get-file-date post))
    (file->string post))))

(define (build-feed posts url author email id)
  (let ((feed '() ))
    (for ([p posts])
      (set! feed (append feed (build-item url author email id p))))
    feed))

(define (to-dns url)
  (if (equal? #t (string-prefix? url "http://"))
      (string-trim url "http://")
      (string-trim url "https://")))

(define (get-site-posts in-path)
  (let* ((posts-path (string-append-paths in-path "/_site/posts"))
		 (dir-list (directory-list (string->path posts-path)))
		 (dir-path-list-temp (map path->string dir-list))
		 (dir-path-list (map (curry string-append posts-path "/") dir-path-list-temp)))
    dir-path-list))

(define (create-rss in-path config diff)
  (let* ((toml-data (parse-toml (file->string config)))
         (url (hash-ref toml-data 'url))
         (author (hash-ref toml-data 'author))
         (email (hash-ref toml-data 'email))
         (id (mint-tag-uri (to-dns url) "2023" "blog"))
         (posts (get-site-posts in-path))
         (items (build-feed posts url author email id))
         (out-feed (feed id url "daves blog" items))
         (out-file (open-output-file
                    (string->path
                     (string-append (path->string in-path) "/_site/feed.rss"))
                    #:exists 'replace)))
    (display (express-xml out-feed 'rss "http://dmetwo.org/feed.rss") out-file)))

;; hash is formatted as:
;; key(file_name) : values (last_updated_date . contents)
(define (get-draft-posts in-path)
  (let* ((posts-path (string-append-paths in-path "/draft/posts"))
		 (dir-list (directory-list (string->path posts-path)))
		 (dir-path-list-temp (map path->string dir-list))
		 (dir-path-list (map (curry string-append posts-path "/") dir-path-list-temp)))
    dir-path-list))

(define (make-new-hash in-path)
  (let* ((posts-path (string-append-paths in-path "/draft/posts"))
		 (dir-list (directory-list (string->path posts-path)))
		 (dir-path-list-temp (map path->string dir-list))
		 (dir-path-list (map (curry string-append posts-path "/") dir-path-list-temp))
         (new-hash (make-hash)))
    (for ([post dir-path-list])
      (hash-set! new-hash post `(,(file-or-directory-modify-seconds post) . ,(get-contents post))))
    new-hash))

(define no-val-found
  (lambda () "no value found"))

(define (write-out-site-data site-data)
  (let ((out-file (open-output-file (string->path "./site-cache.rkt") #:exists 'replace)))
    (write (serialize site-data) out-file)))

(define (get-diff-results new-site-hash old-site-hash in-path write?)
  (when (equal? #t write?)
      (write-out-site-data new-site-hash))
  (let ((posts (get-draft-posts in-path))
        (diff '()))
    (for ([p posts])
      (if (not (equal? (hash-ref new-site-hash p) (hash-ref old-site-hash p no-val-found)))
          (append diff p)
          (append diff '())))
    diff))

(define (check-diff in-path)
  (if (eq? #t (file-exists? "./site-cache.rkt"))
      (get-diff-results (make-new-hash in-path)
                        (deserialize
                         (read (open-input-file "./site-cache.rkt")))
                        in-path #t)
      (begin (write-out-site-data
              (make-new-hash in-path))
             (get-draft-posts in-path))))

(define (not-md? f)
  (if (equal? "md" (get-extension f))
       #f
       #t))

(define (not-dir? f)
  (if (= 1 (length (string-split f ".")))
      #f
      #t))

(define (get-etc-files in-path)
  (let* ((path (string-append-paths in-path "/draft"))
         (dir-list (directory-list (string->path path)))
         (dir-path-list-temp (map path->string dir-list))
         (dir-path-list-temp2 (filter not-md? (filter not-dir? dir-path-list-temp)))
         (dir-path-list (map (curry string-append path "/") dir-path-list-temp2)))
    dir-path-list))

(define (move-file dest src)
  (let* ((file-name (get-file-name src))
         (dest-name (string-append dest "/" file-name)))
    (copy-file src dest-name #:exists-ok? #t)))

;; copies over non .md/.html files
(define (copy-files in-path)
  (let((file-list (get-etc-files in-path)))
    (map (curry move-file (string-append-paths in-path "/_site")) file-list)))

(define (create-site in-path config)
  (define diff (check-diff (string->path in-path)))
  (copy-files (string->path in-path))
  (build-file-date-map (get-draft-posts (string->path in-path)))
  (create-posts   (string->path in-path) diff)
  (create-about   (string->path in-path))
  (create-index   (string->path in-path))
  (create-archive (string->path in-path))
  (create-rss     (string->path in-path) (string->path config) diff))

(define (run-post config-path in_path)
  (let* ((toml_data (parse-toml (file->string config-path)))
         (server (hash-ref toml_data 'server))
         (user (hash-ref toml_data 'user))
         (path (hash-ref toml_data 'path))
         (r-string (string-append "rsync -r " in_path "/_site/ " user "@" server ":" path)))
    ;(print r-string)
    (system r-string)))

(define run-rackle
  (let ((path rackle))
    (if (equal? (post-mode) #t)
	(run-post "config.toml" path)
        (create-site path "config.toml"))))

run-rackle
