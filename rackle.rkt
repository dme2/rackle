;;
;; this script generates a static blog site
;;
;; TODO's
;;   [x] rss/atom feed
;;   [] implement dullmark?
;;   [] check for file updates before building new files

#lang racket
(require racket/cmdline)
(require racket/date)
(require racket/serialize)
(require commonmark)
(require toml)
(require splitflap)

(define post-mode (make-parameter #f))

(define rackle
  (command-line
   #:program "rackle"
   #:once-each
   [("-p" "--post") "Post to website via rsync, will generate new website before posting"
                    (post-mode #t)]
   #:args (file-path)
   file-path))

(define html-header "<!doctype html> \
<html lang=\"en\"> \
  <head> \
    <script type=\"text/javascript\"
 src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML\"></script> \
        <meta charset=\"utf-8\"> \
        <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"> \
        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \
        <title> Archives</title> \
        <link rel=\"stylesheet\" href=\"./css/default.css\" /> \
    </head> \
    <body> \
        <header> \
            <div class=\"logo\"> \
                <a href=\"./\">~dave's blog~</a> \
            </div> \
            <nav>  \
                <a href=\"./index.html\">home</a> \
                <a href=\"./about.html\">about</a> \
                <a href=\"./archive.html\">posts</a> \
            </nav> \
        </header>" )

(define html-post-header "<!doctype html> \
<html lang=\"en\"> \
  <head> \
    <script type=\"text/javascript\"
src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML\"></script> \
        <meta charset=\"utf-8\"> \
        <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"> \
        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \
        <title> Archives</title> \
        <link rel=\"stylesheet\" href=\"../css/default.css\" /> \
    </head> \
    <body> \
        <header> \
            <div class=\"logo\"> \
                <a href=\"../\">~dave's blog~</a> \
            </div> \
            <nav>  \
                <a href=\"../index.html\">home</a> \
                <a href=\"../about.html\">about</a> \
                <a href=\"../archive.html\">posts</a> \
            </nav> \
        </header>" )

(define html-footer "         <footer> \
            Site proudly generated by rackle . <a href=\"./feed.rss\">rss</a> \
        </footer> \
    </body> \
</html> \
")

(define html-post-footer "         <footer> \
            Site proudly generated by rackle . <a href=\"../feed.rss\">rss</a> \
        </footer> \
    </body> \
</html> \
")



(define (string-append-paths p s)
  (string-append (path->string p) s))

(define (find-char c li res)
  (if (eq? c (car li))
	  res
	  (find-char c (cdr li) (cons (car li) res))))

(define (zip l1 l2)
  (map (lambda (i j) (list i j)) l1 l2))

(define (to-html s)
  (string-append s ".html"))

(define (split-at a b)
  (let ((exploded (string->list b)))
	(find-char a exploded '())))

(define (get-post-name post)
  ;(print post)
  (let ((md-name (split-at #\/ (list->string (reverse (string->list post))))))
	(list->string (reverse (split-at #\. (list->string md-name))))))

(define (convert-posts-to-path dest-path post)
  (let ((out-file (open-output-file
                   (string-append dest-path "/"
                                  (to-html (get-post-name post))) #:exists 'replace #:mode'text))
		(doc (document->html (read-document (open-input-file post))))
		(doc2 (write-document-html (read-document (open-input-file post)))))
	(display (string-append html-post-header doc html-post-footer) out-file)
	;(write-document-html (read-document (open-input-file post)) out-file)
	(close-output-port out-file)))

(define (convert-about-to-path dest-path post)
  (let ((out-file (open-output-file
                   (string-append dest-path "/"
                                  (to-html (get-post-name post))) #:exists 'replace #:mode'text))
		(doc (document->html (read-document (open-input-file post))))
		(doc2 (write-document-html (read-document (open-input-file post)))))
	(display (string-append html-header doc html-footer) out-file)
	;(write-document-html (read-document (open-input-file post)) out-file)
	(close-output-port out-file)))

(define (to-link l)
  (let* ((link (car l))
		(name (car (cdr l))))
	(string-append "<a href=\"" link  "\">" name "</a>")))

(define (split-into-link l)
  (let* ((name (get-post-name l))
		 (link (string-append "./posts/" name ".html")))
	(list link name)))

(define (to-list-el i)
  (string-append "\n<li>\n" (to-link (split-into-link i)) "\n</li>\n"))

(define (to-html-list li)
  (string-append "\n<ul>\n" (string-append* (map to-list-el li)) "\n</ul>\n"))

(define (get-title post)
  (let ((post-name (get-post-name post)))
    (string-titlecase (string-replace post-name "-" " "))))

(define (get-contents post)
  (file->string post))

(define (get-posts in-path)
   (let* ((posts-path (string-append-paths in-path "/_site/posts"))
		 (dir-list (directory-list (string->path posts-path)))
		 (dir-path-list (map (curry string-append (path->string in-path) "/_site/posts/")
				     (map path->string dir-list))))
     dir-path-list))

(define (get-post-list in-path)
  (let* ((posts-path (string-append-paths in-path "/_site/posts"))
		 (dir-list (directory-list (string->path posts-path)))
		 (dir-path-list (map (curry string-append "/_site/posts/")
				     (map path->string dir-list))))
	(to-html-list dir-path-list)))

(define (create-posts in-path diff)
  (let* ((posts-path (string-append-paths in-path "/draft/posts"))
		 (dir-list (directory-list (string->path posts-path)))
		 (dir-path-list-temp (map path->string dir-list))
		 (dir-path-list (map (curry string-append posts-path "/") dir-path-list-temp))
		 (site-post-path (string-append-paths in-path "/_site/posts")))
	 (map (curry convert-posts-to-path site-post-path) dir-path-list)
  (map (curry convert-posts-to-path site-post-path) diff)))
   

(define (create-about in-path)
  (let* ((about-path (string-append-paths in-path "/draft/about.md"))
		 (dest-path (string-append-paths in-path "/_site/")))
	(convert-about-to-path dest-path about-path)))

(define (create-index in-path)
  (let* ((dest-path (string-append-paths in-path "/_site/"))
		(idx-file (open-output-file (string-append dest-path "index.html") #:exists 'replace))
		(posts (get-post-list in-path))
		(idx-string (string-append html-header posts html-footer)))
	(display idx-string idx-file)))

(define (create-archive in-path)
  (let* ((dest-path (string-append-paths in-path "/_site/"))
		(idx-file (open-output-file (string-append dest-path "archive.html") #:exists 'replace))
		(posts (get-post-list in-path))
		(idx-string (string-append html-header posts html-footer)))
	(display idx-string idx-file)))

(define (pad d)
  (if (< (string-length d) 2)
      (string-append "0" d)
      d))

;; returns modified date as "YYYY-MM-DD"
(define (get-file-date file-path)
  (let* ((dt (seconds->date (file-or-directory-modify-seconds file-path)))
         (year (number->string (date-year dt)))
         (month (pad (number->string (date-month dt))))
         (day   (pad (number->string (date-day   dt)))))
    (string-append year "-" month "-" day)))

(define (build-item url author email id post)
  (list
   (feed-item
    (append-specific id (get-post-name post))
    (string-append url "/posts/" (to-html (get-post-name post)))
    (get-title post)
    (person author email)
    (infer-moment (get-file-date post))
    (infer-moment (get-file-date post))
    (file->string post))))

(define (build-feed posts url author email id)
  (let ((feed '() ))
    (for ([p posts])
      (set! feed (append feed (build-item url author email id p))))
    feed))

(define (create-rss in-path config diff)
  (let* ((toml-data (parse-toml (file->string config)))
         (url (hash-ref toml-data 'url))
         (author (hash-ref toml-data 'author))
         (email (hash-ref toml-data 'email))
         (id (mint-tag-uri "dmetwo.org" "2023" "blog")) ;; todo (to-dns)
         ;(posts (get-posts in-path))
         (posts diff)
         (items (build-feed posts url author email id))
         (out-feed (feed id url "daves blog" items))
         ; #:exists 'replace))
         (out-file (open-output-file
                    (string->path
                     (string-append (path->string in-path) "/_site/feed.rss")) #:exists 'replace)))
    (display (express-xml out-feed 'rss "http://dmetwo.org/feed.rss") out-file))) ;; todo

;; hash is formatted as:
;; key(file_name) : values (last_updated_date . contents)

(define (get-draft-posts in-path)
  (let* ((posts-path (string-append-paths in-path "/draft/posts"))
		 (dir-list (directory-list (string->path posts-path)))
		 (dir-path-list-temp (map path->string dir-list))
		 (dir-path-list (map (curry string-append posts-path "/") dir-path-list-temp)))
    dir-path-list))
  
(define (make-new-hash in-path)
  (let* ((posts-path (string-append-paths in-path "/draft/posts"))
		 (dir-list (directory-list (string->path posts-path)))
		 (dir-path-list-temp (map path->string dir-list))
		 (dir-path-list (map (curry string-append posts-path "/") dir-path-list-temp))
         (new-hash (make-hash)))
    (for ([post dir-path-list])
      (hash-set! new-hash post `(,(file-or-directory-modify-seconds post) . ,(get-contents post))))
    new-hash))

(define (get-diff-results new-site-hash old-site-hash in-path)
  (let ((posts (get-draft-posts in-path))
        (diff '()))
    (for ([p posts])
      (if (not (equal? (hash-ref new-site-hash p) (hash-ref old-site-hash p)))
          (append diff p)
          (append diff '())))
    diff))

(define (write-out-site-data site-data)
  (let ((out-file (open-output-file (string->path "./site-cache.rkt"))))
    (write (serialize site-data) out-file)))

(define (check-diff in-path)
  (if (eq? #t (file-exists? "./site-cache.rkt"))
      (get-diff-results (make-new-hash in-path)
                        (deserialize 
                         (read (open-input-file "./site-cache.rkt")))
                        in-path)
                        ;(string->path (string-append
                        ;               (path->string
                        ;                in-path) "/draft")))
      (begin (write-out-site-data
              (make-new-hash in-path))
             (get-draft-posts in-path))))

(define (create-site in-path config)
  (define diff (check-diff (string->path in-path)))
;  (check-diff     (string->path in-path))
  (create-posts   (string->path in-path) diff)
  (create-about   (string->path in-path))
  (create-index   (string->path in-path))
  (create-archive (string->path in-path))
  (create-rss     (string->path in-path) (string->path config) diff))

(define (run-post config-path in_path)
  (let* ((toml_data (parse-toml (file->string config-path)))
         (server (hash-ref toml_data 'server))
         (user (hash-ref toml_data 'user))
         (path (hash-ref toml_data 'path))
         (r-string (string-append "rsync -r " in_path "/_site/ " user "@" server ":" path)))
    (print r-string)
    (system r-string)))

(define run-rackle
  (let ((path rackle))
    (if (equal? (post-mode) #t)
	(run-post "config.toml" path)
        (create-site path "config.toml"))))

run-rackle
